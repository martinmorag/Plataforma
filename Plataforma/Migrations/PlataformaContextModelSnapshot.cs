// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Plataforma.Data;

#nullable disable

namespace Plataforma.Migrations
{
    [DbContext(typeof(PlataformaContext))]
    partial class PlataformaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Plataforma.Models.Archivo", b =>
                {
                    b.Property<Guid>("ArchivoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ArchivoUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<TimeSpan?>("DuracionVideo")
                        .HasColumnType("interval");

                    b.Property<DateTime>("FechaSubida")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<long>("SizeInBytes")
                        .HasColumnType("bigint");

                    b.HasKey("ArchivoId");

                    b.ToTable("archivos");
                });

            modelBuilder.Entity("Plataforma.Models.Clase", b =>
                {
                    b.Property<Guid>("ClaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ModuloId")
                        .HasColumnType("uuid");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.HasKey("ClaseId");

                    b.HasIndex("ModuloId");

                    b.ToTable("clases");
                });

            modelBuilder.Entity("Plataforma.Models.Curso", b =>
                {
                    b.Property<Guid>("CursoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("CursoId");

                    b.ToTable("cursos");
                });

            modelBuilder.Entity("Plataforma.Models.CursoEstudiante", b =>
                {
                    b.Property<Guid>("CursoId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EstudianteId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CursoEstudianteId")
                        .HasColumnType("uuid");

                    b.HasKey("CursoId", "EstudianteId");

                    b.HasIndex("EstudianteId");

                    b.ToTable("CursoEstudiantes");
                });

            modelBuilder.Entity("Plataforma.Models.CursoProfesor", b =>
                {
                    b.Property<Guid>("CursoId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProfesorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CursoProfesorId")
                        .HasColumnType("uuid");

                    b.HasKey("CursoId", "ProfesorId");

                    b.HasIndex("ProfesorId");

                    b.ToTable("CursoProfesores");
                });

            modelBuilder.Entity("Plataforma.Models.Entrega", b =>
                {
                    b.Property<Guid>("EntregaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ArchivoId")
                        .HasColumnType("uuid");

                    b.Property<string>("ComentariosProfesor")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("Estado")
                        .HasColumnType("integer");

                    b.Property<Guid>("EstudianteId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("FechaEntrega")
                        .HasColumnType("timestamp with time zone");

                    b.Property<TimeSpan?>("ProgresoVideo")
                        .HasColumnType("interval");

                    b.Property<Guid>("TareaId")
                        .HasColumnType("uuid");

                    b.HasKey("EntregaId");

                    b.HasIndex("ArchivoId")
                        .IsUnique();

                    b.HasIndex("EstudianteId");

                    b.HasIndex("TareaId");

                    b.ToTable("entregas");
                });

            modelBuilder.Entity("Plataforma.Models.Modulo", b =>
                {
                    b.Property<Guid>("ModuloId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CursoId")
                        .HasColumnType("uuid");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("ModuloId");

                    b.HasIndex("CursoId");

                    b.ToTable("modulos");
                });

            modelBuilder.Entity("Plataforma.Models.Tarea", b =>
                {
                    b.Property<Guid>("TareaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ArchivoId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClaseId")
                        .HasColumnType("uuid");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("FechaVencimiento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TipoEntregaEsperado")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("TareaId");

                    b.HasIndex("ArchivoId")
                        .IsUnique();

                    b.HasIndex("ClaseId");

                    b.ToTable("tareas");
                });

            modelBuilder.Entity("Plataforma.Models.UsuarioIdentidad", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("UsuarioIdentidad");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Plataforma.Models.Administrador", b =>
                {
                    b.HasBaseType("Plataforma.Models.UsuarioIdentidad");

                    b.HasDiscriminator().HasValue("Administrador");
                });

            modelBuilder.Entity("Plataforma.Models.Estudiante", b =>
                {
                    b.HasBaseType("Plataforma.Models.UsuarioIdentidad");

                    b.HasDiscriminator().HasValue("Estudiante");
                });

            modelBuilder.Entity("Plataforma.Models.Profesor", b =>
                {
                    b.HasBaseType("Plataforma.Models.UsuarioIdentidad");

                    b.HasDiscriminator().HasValue("Profesor");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Plataforma.Models.UsuarioIdentidad", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Plataforma.Models.UsuarioIdentidad", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plataforma.Models.UsuarioIdentidad", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Plataforma.Models.UsuarioIdentidad", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Plataforma.Models.Clase", b =>
                {
                    b.HasOne("Plataforma.Models.Modulo", "Modulo")
                        .WithMany("Clases")
                        .HasForeignKey("ModuloId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Modulo");
                });

            modelBuilder.Entity("Plataforma.Models.CursoEstudiante", b =>
                {
                    b.HasOne("Plataforma.Models.Curso", "Curso")
                        .WithMany("CursoEstudiantes")
                        .HasForeignKey("CursoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plataforma.Models.Estudiante", "Estudiante")
                        .WithMany("CursoEstudiantes")
                        .HasForeignKey("EstudianteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Curso");

                    b.Navigation("Estudiante");
                });

            modelBuilder.Entity("Plataforma.Models.CursoProfesor", b =>
                {
                    b.HasOne("Plataforma.Models.Curso", "Curso")
                        .WithMany("CursoProfesores")
                        .HasForeignKey("CursoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plataforma.Models.Profesor", "Profesor")
                        .WithMany("CursoProfesores")
                        .HasForeignKey("ProfesorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Curso");

                    b.Navigation("Profesor");
                });

            modelBuilder.Entity("Plataforma.Models.Entrega", b =>
                {
                    b.HasOne("Plataforma.Models.Archivo", "Archivo")
                        .WithOne()
                        .HasForeignKey("Plataforma.Models.Entrega", "ArchivoId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Plataforma.Models.Estudiante", "Estudiante")
                        .WithMany()
                        .HasForeignKey("EstudianteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plataforma.Models.Tarea", "Tarea")
                        .WithMany()
                        .HasForeignKey("TareaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Archivo");

                    b.Navigation("Estudiante");

                    b.Navigation("Tarea");
                });

            modelBuilder.Entity("Plataforma.Models.Modulo", b =>
                {
                    b.HasOne("Plataforma.Models.Curso", "Curso")
                        .WithMany("Modulos")
                        .HasForeignKey("CursoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Curso");
                });

            modelBuilder.Entity("Plataforma.Models.Tarea", b =>
                {
                    b.HasOne("Plataforma.Models.Archivo", "Archivo")
                        .WithOne()
                        .HasForeignKey("Plataforma.Models.Tarea", "ArchivoId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Plataforma.Models.Clase", "Clase")
                        .WithMany("Tareas")
                        .HasForeignKey("ClaseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Archivo");

                    b.Navigation("Clase");
                });

            modelBuilder.Entity("Plataforma.Models.Clase", b =>
                {
                    b.Navigation("Tareas");
                });

            modelBuilder.Entity("Plataforma.Models.Curso", b =>
                {
                    b.Navigation("CursoEstudiantes");

                    b.Navigation("CursoProfesores");

                    b.Navigation("Modulos");
                });

            modelBuilder.Entity("Plataforma.Models.Modulo", b =>
                {
                    b.Navigation("Clases");
                });

            modelBuilder.Entity("Plataforma.Models.Estudiante", b =>
                {
                    b.Navigation("CursoEstudiantes");
                });

            modelBuilder.Entity("Plataforma.Models.Profesor", b =>
                {
                    b.Navigation("CursoProfesores");
                });
#pragma warning restore 612, 618
        }
    }
}
